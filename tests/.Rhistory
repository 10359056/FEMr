modJ = basisobj$J
ones3 = matrix(1,3,1)
modJMat = modJ %*% t(ones3)
M1 = cbind(v2[,1]*v3[,2] - v3[,1]*v2[,2], v2[,2] - v3[,2], v3[,1] - v2[,1])/(modJMat)
M2 = cbind(v3[,1]*v1[,2] - v1[,1]*v3[,2], v3[,2] - v1[,2], v1[,1] - v3[,1])/(modJMat)
M3 = cbind(v1[,1]*v2[,2] - v2[,1]*v1[,2], v1[,2] - v2[,2], v2[,1] - v1[,1])/(modJMat)
ind = matrix(0,N,1)
for(i in 1:N)
{
ind[i] = R_insideIndex(mesh, as.numeric(locations[i,]))
}
evalmat = matrix(NA, nrow=N, ncol=nsurf)
for (isurf in 1:nsurf)
{
for(i in 1:N)
{
indi = ind[i]
if(!is.nan(indi))
{
baryc1 = (M1[indi,]*Pgpts[i,]) %*% ones3
baryc2 = (M2[indi,]*Pgpts[i,]) %*% ones3
baryc3 = (M3[indi,]*Pgpts[i,]) %*% ones3
if(order == 2)
{
c1 = coefmat[triangles[indi,1],isurf]
c2 = coefmat[triangles[indi,2],isurf]
c3 = coefmat[triangles[indi,3],isurf]
c4 = coefmat[triangles[indi,6],isurf]
c5 = coefmat[triangles[indi,4],isurf]
c6 = coefmat[triangles[indi,5],isurf]
fval =  c1*(2* baryc1^2 - baryc1) +
c2*(2* baryc2^2 - baryc2) +
c3*(2* baryc3^2 - baryc3) +
c4*(4* baryc1 * baryc2) +
c5*(4* baryc2 * baryc3) +
c6*(4* baryc3 * baryc1)
evalmat[i,isurf] = fval
}
else
{
c1 = coefmat[triangles[indi,1],isurf]
c2 = coefmat[triangles[indi,2],isurf]
c3 = coefmat[triangles[indi,3],isurf]
fval = c1*baryc1 + c2*baryc2 + c3*baryc3
evalmat[i,isurf] = fval
}
}
}
}
return(evalmat)
}
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
felsplobj = felsplobj$felsplobj
loc_nodes = 1:length(observations)
fnhat = eval.FEM.fobj(fobj = felsplobj, locations = locations, CPP_CODE = FALSE)
betahat  = lm.fit(covariates,observations-fnhat)
betahat
betahat  = lm.fit(covariates,observations-fnhat)$coefficients
betahat
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, CPP_CODE = TRUE)
names(ZincMeusefd1)
beta
ZincMeusefd1$beta
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
covariates
ZincMeusefd1$beta
?rgl.triangles
?rgl.triangles
plot
?rgl.triangles
??rgl.triangles
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10, main = "MEUSE")
plot(ZincMeusefd1$felsplobj, num_refinements = 10, )
plot(ZincMeusefd1$felsplobj, num_refinements = 10, rgl.material(color="#000000")
)
data = loadData('heightWeight'); % data(:,1) = class, 2 = height, 3 = weight
data = loadData('heightWeight'); % data(:,1) = class, 2 = height, 3 = weight)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
# BorderIndices = (1:length(mesh$nodesmarker))[mesh$nodesmarker==1]
# Indices= BorderIndices
# Values = rep(x = 7, times = length(Indices))
# BC = list(Indices = Indices, Values = Values)
plot(mesh)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
installed.packages("roxygen2")
installed.packages("roxygen")
installed.packages("roxygen2")
installed.packages("roxygen23")
install.packages("roxygen2")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
# ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                             lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
# Rprof(NULL)
# system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
#                              observations = data, basisobj = basisobj,
#                              lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
#Rprof("smooth.out", memory.profiling = TRUE)
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
install.packages("fda")
library(FEMr)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, covariates = covariates, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
ZincMeusefd1
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1])
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(locations = locations, observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
setwd("~/git/FEMr/tests")
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1])
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(locations = locations, observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1])
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(locations = locations, observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
observations = sin(pi*mesh$nodes[,1])
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1])
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
output_CPP = smooth.FEM.basis(observations = observations,
basisobj = basisobj, lambda = lambda)
output_CPP = smooth.FEM.basis(observations = observations,
basisobj = basisobj, lambda = lambda)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
locations
debugSource('~/git/FEMr/RScripts/PDE_example.R')
debugSource('~/git/FEMr/RScripts/PDE_example.R')
debugSource('~/git/FEMr/RScripts/PDE_example.R')
library(FEMr)
debugSource('~/git/FEMr/tests/testsmoothingPDE.R')
debugSource('~/git/FEMr/tests/testsmoothingPDE.R')
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1])
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters)
fix(smooth.FEM.PDE.basis())
fix(smooth.FEM.PDE.basis
)
fix(smooth.FEM.PDE.basis)
source('~/git/FEMr/tests/testsmoothingPDE.R')
locations
s
fix(CPP_smooth.FEM.PDE.basis)
source('~/git/FEMr/tests/testsmoothingPDE.R')
locations
locationa
locations
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
source('~/git/FEMr/tests/testsmoothingPDE.R')
fix(CPP_smooth.FEM.PDE.basis
)
source('~/git/FEMr/tests/testsmoothingPDE.R')
source('~/git/FEMr/tests/testsmoothingPDE.R')
fix(smooth.FEM.PDE.basis())
fix(smooth.FEM.PDE.basis
)
source('~/git/FEMr/tests/testsmoothingPDE.R')
observations = sin(pi*mesh$nodes[,1]) + rnorm(sd = 0.1)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
library(FEMr)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2, 1, 100)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
source('~/git/FEMr/tests/testsmoothingPDE.R')
source('~/git/FEMr/tests/testsmoothingPDE.R')
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-4, 10^-2, 1, 100)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-1, 1, 10)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
#  smooth the data without covariates
lambda = c(10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(1,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(0,0), c = 0)
output_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(output_CPP_PDE$fit.FEM)
FEM_CPP = smooth.FEM.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
FEM_CPP = smooth.FEM.basis(observations = observations,
basisobj = basisobj, lambda = lambda)
plot(FEM_CPP_PDE$fit.FEM)
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
FEM_CPP = smooth.FEM.basis(observations = observations,
basisobj = basisobj, lambda = lambda)
plot(FEM_CPP_PDE$fit.FEM)
plot(FEM_CPP$fit.FEM)
load("mesh.example.2D")
plot(mesh)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
observations = sin(pi*mesh$nodes[,1]) + rnorm(n = nrow(mesh$nodes), sd = 0.1)
basisobj = create.FEM.basis(mesh, 2)
#  smooth the data without covariates
lambda = c(10^-2, 10^-1, 0.5, 5, 10)
## data diviso in due
BC = NULL
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), beta = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
PDE_parameters = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
FEM_CPP_PDE = smooth.FEM.PDE.basis(observations = observations,
basisobj = basisobj, lambda = lambda, PDE_parameters = PDE_parameters)
plot(FEM_CPP_PDE$fit.FEM)
