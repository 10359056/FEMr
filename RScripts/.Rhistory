library(RTriangle)
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = 1)
source('/home/eardi/git/SSR/R/mesh.2D.R')
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = 1)
mesh$triangles
mesh$neighbors
plot(mesh)
names(mesh)
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = 1)
plot(mesh)
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)))
plot(mesh)
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)))
plot(mesh)
mesh$triangles
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
triangles=rbind(c(2,1,3), c(3,5,4), c(5,3,1)))
plot(mesh)
mesh_coarse<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)))
## Creates an object TRIMESH2D with a concavity and second order nodes
mesh_coarse<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)))
## Refines the the triangulation in specified in the \code{mesh_coarse} object
mesh<-refine.MESH.2D(mesh,maximum_area = 0.005, delaunay = T)
## Plot it
plot(mesh)
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
man(SSR)
help(SSR)
??SSR
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
??SSR
help(SSR)
?create.MESH.2D
??create.MESH.2D
??refine.MESH.2D
order = 1
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = order)
plot(mesh)
#mesh2<-refine.MESH.2D(mesh,maximum_area = 0.005, delaunay = T)
#plot(mesh2)
basisobj = create.FEM.basis(mesh, order)
order = 1
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = order)
plot(mesh)
#mesh2<-refine.MESH.2D(mesh,maximum_area = 0.005, delaunay = T)
#plot(mesh2)
basisobj = create.FEM.basis(mesh, order)
basisobj
names(basisobj)
type
install.packages("gstat")
MeuseData = as.matrix(read.table('MeuseData.txt', header=F))
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data()
data(package = "SSR")
data(package = "SSR")
data(package = "SSR")
data(package = .packages(all.available = TRUE))
detach("package:SSR", unload=TRUE)
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
library(SSR)
data
data()
data(package = 'SSR')
system.file("data", "2012.csv", package = "testdat")
system.file("data", "MeuseData.txt", package = "SSR")
system.file("data", "MeuseData.txt", package = "SSR")
system.file("data", "MeuseData.txt", package = "SSR")
system.file("data", "MeuseData.txt", package = "SSR")
system.file("", "MeuseData.txt", package = "SSR")
use_data(x, mtcars)
data(package = "SSR")
MeuseData=read.table('Data/MeuseData.txt', header=FALSE)
data(package = "SSR")
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data("MeuseData")
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
library(SSR)
data()
data(package = "SSR")
as.matrix(read.table('/Data/MeuseData.txt', header=F))
as.matrix(read.table('Data/MeuseData.txt', header=F))
as.matrix(read.table('MeuseData.txt', header=F))
MeuseData[,c(2,3)]
MeuseData[,c(2,3)]
MeuseData[,c(2,3)]
MeuseData[,c(2,3)]
MeuseData[,c(2,3)]
MeuseData[,c(2,3)]
data(package = "SSR")
data(package = "gstat")
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
data(package = "SSR")
data(package = "SSR")
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data(package = "SSR")
data(package = "SSR")
data(MeuseData)
MeuseData
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
data(package = "SSR")
data(package = "SSR")
data(package = "gstat")
data(package = "mgcv")
load("/home/eardi/workspace/Realeasing/SSR/Data/meuseborder.rda")
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
data(meuseall)
data(AirPassengers)
data()
data(zzzzzz)
data(package = "SSR")
data(package = "Meuse")
data(package = "gstat")
??meuseall
data(meuseall)
data(meuseall)
data(meuseall)
data(meuseall)
data()
data(package = "gstat")
data(meuse.all)
data(meuse.all, package = "gstat")
data(meuseall, package = "gstat")
data(meuseall, package = "gstat")
data(meuseall, package = "SSR")
data(package = "SSR")
data(package = "gstat")
data(package = "SSR")
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data(package = "SSR")
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz")
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
data(package = "SSR")
data(meuseall)
data(MeuseData)
data(MeuseData)
data(meuseall)
data(meuseall, package = "SSR")
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
detach("package:SSR", unload=TRUE)
remove.packages("SSR", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/Realeasing/SSR_0.9-1.tar.gz", repos = NULL, type = "source")
library("SSR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
data(package = "SSR")
??RPDE
library(RPDE)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
data = log(MeuseData[,7])
basisobj = create.FEM.basis(mesh, order)
lambda = 10^3.5
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj,
lambda = lambda, CPP_CODE = FALSE)
plot(ZincMeuse$felsplobj)
lambda = c(1,2,3)
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj,
lambda = lambda, CPP_CODE = FALSE)
plot(ZincMeuse$felsplobj)
lambda = 1
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj,
lambda = lambda, CPP_CODE = FALSE)
ZincMeuse = smooth.FEM.basis(observations = data, basisobj = basisobj,
lambda = lambda, CPP_CODE = FALSE)
covariates
library(RPDE)
data(MeuseData)
data(MeuseBorder)
order=1
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
library(RTriangle)
triangulate_native
remove.packages("RPDE", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages("~/workspace/RPDE/Release/RPDE_0.9-1.tar.gz", repos = NULL, type = "source")
source('~/workspace/RPDE/RScripts/meuse_example.R')
install.packages("RcppEigen")
library(RPDE)
#setwd("~/workspace/RPDE/RScripts")
data(MeuseData)
data(MeuseBorder)
order=2
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = order)
plot(mesh)
mesh <- refine.MESH.2D(mesh, maximum_area = 5000)
plot(mesh)
data = log(MeuseData[,7])
covariates = matrix(1,nrow=length(data),ncol=2)
covariates[,1] = sqrt(MeuseData[,9])
covariates[,2] = (MeuseData[,8])
#  set up the FEM basis object and plot it
# NO ORDER
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = 10^3.5
Rprof("smooth.out", memory.profiling = TRUE)
ouputR<-smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, CPP_CODE = FALSE)
Rprof(NULL)
system.time(smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, CPP_CODE = TRUE))
ZincMeusefd1 = smooth.FEM.basis(locations = MeuseData[,c(2,3)],
observations = data, basisobj = basisobj,
lambda = lambda, GCV = FALSE, CPP_CODE = TRUE)
plot(ZincMeusefd1$felsplobj, num_refinements = 10)
## What if BC Dirichlet
BorderIndices = (1:length(mesh$nodesmarker))[mesh$nodesmarker==1]
Indices= BorderIndices
Values = rep(x = 7, times = length(Indices))
BC = list(Indices = Indices, Values = Values)
output = smooth.FEM.basis(#locations = MeuseData[,c(2,3)],
observations = data,
#covariates = covariates,
basisobj = basisobj,
GCV = FALSE,
lambda = lambda, BC = BC, CPP_CODE = TRUE)
plot(output$felsplobj, num_refinements = 10)
eval
class(quote(3.14))
class(quote(+3.14))
class(quote(-3.14))
class(quote("3.14"))
class(quote('3.14'))
install.packages("microbenchmark")
f <- function(x) NULL
s3 <- function(x) UseMethod("s3")
s3.integer <- f
A <- setClass("A", representation(a = "list"))
setGeneric("s4", function(x) standardGeneric("s4"))
setMethod(s4, "A", f)
B <- setRefClass("B", methods = list(rc = f))
a <- A()
b <- B$new()
microbenchmark(
fun = f(),
S3 = s3(1L),
S4 = s4(a),
RC = b$rc()
)
library(microbenchmark)
microbenchmark(
fun = f(),
S3 = s3(1L),
S4 = s4(a),
RC = b$rc()
)
library(RPDE)
setwd("~/workspace/RPDE/RScripts")
order = 1
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order = order)
basisobj = create.FEM.basis(mesh, order)
#  smooth the data without covariates
lambda = c(1)
## data diviso in due
locations = rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0))
observations = c(1,2,1,2,1)
data = c(1,2,1,2,1)
covariates = cbind(c(1, 2, 3, 4, 5))
BC = NULL
output_R = smooth.FEM.basis(
locations  = locations,
observations = data,
basisobj = basisobj, lambda = lambda,
covariates = covariates,
GCV = TRUE,
CPP_CODE = FALSE)
