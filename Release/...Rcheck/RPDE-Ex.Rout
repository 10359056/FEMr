
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RPDE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RPDE')
Loading required package: RTriangle
Loading required package: rgl

Attaching package: ‘rgl’

The following object is masked from ‘package:RTriangle’:

    triangulate

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MeuseBorder")
> ### * MeuseBorder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MeuseBorder
> ### Title: Border of Meuse river data set
> ### Aliases: MeuseBorder
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(MeuseBorder)
> summary(MeuseBorder)
       V1               V2        
 Min.   :  1.00   Min.   :  1.00  
 1st Qu.: 34.00   1st Qu.: 34.00  
 Median : 62.50   Median : 62.50  
 Mean   : 67.88   Mean   : 67.88  
 3rd Qu.: 96.00   3rd Qu.: 96.00  
 Max.   :155.00   Max.   :155.00  
> 
> 
> 
> cleanEx()
> nameEx("MeuseData")
> ### * MeuseData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MeuseData
> ### Title: Meuse river data set - original, full data set
> ### Aliases: MeuseData
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(MeuseData)
> summary(MeuseData)
       V1               V2               V3               V4        
 Min.   :  1.00   Min.   :178605   Min.   :329714   Min.   : 0.200  
 1st Qu.: 40.50   1st Qu.:179371   1st Qu.:330762   1st Qu.: 0.800  
 Median : 85.00   Median :179991   Median :331633   Median : 2.100  
 Mean   : 82.62   Mean   :180005   Mean   :331635   Mean   : 3.246  
 3rd Qu.:124.50   3rd Qu.:180630   3rd Qu.:332463   3rd Qu.: 3.850  
 Max.   :164.00   Max.   :181390   Max.   :333611   Max.   :18.100  
                                                                    
       V5               V6              V7               V8        
 Min.   : 14.00   Min.   : 37.0   Min.   : 113.0   Min.   : 5.180  
 1st Qu.: 23.00   1st Qu.: 72.5   1st Qu.: 198.0   1st Qu.: 7.546  
 Median : 31.00   Median :123.0   Median : 326.0   Median : 8.180  
 Mean   : 40.32   Mean   :153.4   Mean   : 469.7   Mean   : 8.165  
 3rd Qu.: 49.50   3rd Qu.:207.0   3rd Qu.: 674.5   3rd Qu.: 8.955  
 Max.   :128.00   Max.   :654.0   Max.   :1839.0   Max.   :10.520  
                                                                   
       V9               V10              V11             V12       
 Min.   :0.00000   Min.   : 1.000   Min.   :1.000   Min.   :1.000  
 1st Qu.:0.07569   1st Qu.: 5.300   1st Qu.:1.000   1st Qu.:1.000  
 Median :0.21184   Median : 6.900   Median :1.000   Median :1.000  
 Mean   :0.24002   Mean   : 7.478   Mean   :1.606   Mean   :1.452  
 3rd Qu.:0.36407   3rd Qu.: 9.000   3rd Qu.:2.000   3rd Qu.:2.000  
 Max.   :0.88039   Max.   :17.000   Max.   :3.000   Max.   :3.000  
                   NA's   :2                                       
> 
> 
> 
> cleanEx()
> nameEx("create.FEM.basis")
> ### * create.FEM.basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create.FEM.basis
> ### Title: Creates a Finite Element Method basis
> ### Aliases: create.FEM.basis
> 
> ### ** Examples
> 
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
> ## Plot it
> plot(mesh)                   
> 
> # Creates the basis object
> basisobj = create.FEM.basis(mesh, order=1)
> 
> 
> 
> cleanEx()
> nameEx("create.MESH.2D")
> ### * create.MESH.2D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create.MESH.2D
> ### Title: Creates a TRIMESH2D object
> ### Aliases: create.MESH.2D
> 
> ### ** Examples
> 
> ## Creates an object TRIMESH2D on the convex hull of the specified nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)))
> ## Plot it
> plot(mesh)
> 
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)))
> ## Plot it
> plot(mesh)
> 
> ## Creates an object TRIMESH2D with second order nodes starting from a first order triangulation
> ## specified by nodes and triangles
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      triangles=rbind(c(2,1,3), c(3,5,4), c(5,3,1)), order = 2)
> ## Plot it
> plot(mesh)
> 
> 
> 
> cleanEx()
> nameEx("refine.MESH.2D")
> ### * refine.MESH.2D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refine.MESH.2D
> ### Title: Refine the triangulation
> ### Aliases: refine.MESH.2D
> 
> ### ** Examples
> 
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh_coarse<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)))
> ## Plot it
> plot(mesh_coarse)                   
> ## Refines the the triangulation in specified in the \code{mesh_coarse} object
> mesh<-refine.MESH.2D(mesh_coarse,maximum_area = 0.005, delaunay = TRUE)
> ## Plot the refined mesh
> plot(mesh)
> 
> 
> 
> cleanEx()
> nameEx("smooth.FEM.PDE.SV.basis")
> ### * smooth.FEM.PDE.SV.basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smooth.FEM.PDE.SV.basis
> ### Title: Compute a solution for a Spatial Spline problem
> ### Aliases: smooth.FEM.PDE.SV.basis
> 
> ### ** Examples
> 
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
> ## Plot it
> plot(mesh)                   
> 
> # Creates the basis object
> basisobj = create.FEM.basis(mesh, order=1)
> 
> 
> 
> cleanEx()
> nameEx("smooth.FEM.PDE.basis")
> ### * smooth.FEM.PDE.basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smooth.FEM.PDE.basis
> ### Title: Compute a solution for a Spatial Regression with PDE
> ###   Penalization
> ### Aliases: smooth.FEM.PDE.basis
> 
> ### ** Examples
> 
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
> ## Plot it
> plot(mesh)                   
> 
> # Creates the basis object
> basisobj = create.FEM.basis(mesh, order=1)
> 
> 
> 
> cleanEx()
> nameEx("smooth.FEM.basis")
> ### * smooth.FEM.basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: smooth.FEM.basis
> ### Title: Compute a solution for a Spatial Spline problem
> ### Aliases: smooth.FEM.basis
> 
> ### ** Examples
> 
> data(meuseall)
Warning in data(meuseall) : data set ‘meuseall’ not found
> ## Creates an object TRIMESH2D with a concavity and second order nodes
> mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
+                      segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
> ## Plot it
> plot(mesh)                   
> 
> # Creates the basis object
> basisobj = create.FEM.basis(mesh, order=1)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.6 0.012 0.619 0 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
